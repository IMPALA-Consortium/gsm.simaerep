% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ChartsMetricSimaerep.R
\name{ChartsMetricSimaerep}
\alias{ChartsMetricSimaerep}
\title{ChartsMetricSimaerep Function}
\usage{
ChartsMetricSimaerep(
  lCharts,
  dfResults_latest,
  lMetric,
  dfGroups,
  dfBounds_latest,
  vThreshold,
  bDebug
)
}
\arguments{
\item{lCharts}{\code{list}, Default: list()}

\item{lMetric}{`list` Metric-specific metadata for use in charts and
reporting. Created by passing an `lWorkflow` object to [MakeMetric()] and
turing it into a list. Expected columns: `File`,`MetricID`, `Group`,
`Abbreviation`, `Metric`, `Numerator`, `Denominator`, `Model`, `Score`, and
`strThreshold`. For more details see the Data Model vignette:
`vignette("DataModel", package = "gsm.kri")`.}

\item{dfGroups}{`data.frame` Group-level metadata dictionary. Created by
passing CTMS site and study data to [MakeLongMeta()]. Expected columns:
`GroupID`, `GroupLevel`, `Param`, `Value`.}

\item{vThreshold}{`numeric` Threshold values for metric.}

\item{bDebug}{`logical` Print debug messages? Default: `FALSE`.}
}
\value{
A list containing the following charts:
\itemize{
\item scatterPlot: A scatter plot using JavaScript.
\item barChart: A bar chart using JavaScript with metric on the y-axis.
\item timeSeries: A time series chart using JavaScript with score on the y-axis.
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

The function creates all metric charts for a simaerep metric using the data provided
}
\examples{
lCharts <- list()
strMetricID = "Analysis_kri0001"

dfResults_latest <-  gsm.core::reportingResults \%>\%
 dplyr::filter(MetricID == strMetricID) \%>\%
 FilterByLatestSnapshotDate()

dfBounds_latest <- gsm.core::reportingBounds \%>\%
 dplyr::filter(MetricID == strMetricID) \%>\%
 FilterByLatestSnapshotDate()

dfGroups <- gsm.core::reportingGroups

lMetric <- gsm.core::reportingMetrics \%>\%
 dplyr::filter(MetricID == strMetricID) \%>\%
 as.list()

vThreshold = gsm.core::ParseThreshold(lMetric$Threshold, bSort = FALSE)

lCharts <- lCharts \%>\%
  ChartsMetricDefault(
    dfResults= dfResults_latest,
    lMetric = lMetric,
    dfGroups = dfGroups,
    dfBounds = dfBounds_latest,
    vThreshold = vThreshold,
    bDebug = FALSE
  )

lCharts
}
